// Code generated by MockGen. DO NOT EDIT.
// Source: /home/zoncoen/dev/src/github.com/zoncoen/scenarigo/testdata/gen/pb/test/test.pb.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockTestClient is a mock of TestClient interface
type MockTestClient struct {
	ctrl     *gomock.Controller
	recorder *MockTestClientMockRecorder
}

// MockTestClientMockRecorder is the mock recorder for MockTestClient
type MockTestClientMockRecorder struct {
	mock *MockTestClient
}

// NewMockTestClient creates a new mock instance
func NewMockTestClient(ctrl *gomock.Controller) *MockTestClient {
	mock := &MockTestClient{ctrl: ctrl}
	mock.recorder = &MockTestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTestClient) EXPECT() *MockTestClientMockRecorder {
	return m.recorder
}

// Echo mocks base method
func (m *MockTestClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Echo", varargs...)
	ret0, _ := ret[0].(*EchoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Echo indicates an expected call of Echo
func (mr *MockTestClientMockRecorder) Echo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockTestClient)(nil).Echo), varargs...)
}

// MockTestServer is a mock of TestServer interface
type MockTestServer struct {
	ctrl     *gomock.Controller
	recorder *MockTestServerMockRecorder
}

// MockTestServerMockRecorder is the mock recorder for MockTestServer
type MockTestServerMockRecorder struct {
	mock *MockTestServer
}

// NewMockTestServer creates a new mock instance
func NewMockTestServer(ctrl *gomock.Controller) *MockTestServer {
	mock := &MockTestServer{ctrl: ctrl}
	mock.recorder = &MockTestServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTestServer) EXPECT() *MockTestServerMockRecorder {
	return m.recorder
}

// Echo mocks base method
func (m *MockTestServer) Echo(arg0 context.Context, arg1 *EchoRequest) (*EchoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Echo", arg0, arg1)
	ret0, _ := ret[0].(*EchoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Echo indicates an expected call of Echo
func (mr *MockTestServerMockRecorder) Echo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockTestServer)(nil).Echo), arg0, arg1)
}
